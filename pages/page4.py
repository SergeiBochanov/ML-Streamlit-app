import streamlit as st
import pandas as pd
import pickle
import tensorflow as tf
from catboost import CatBoostClassifier

st.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")

catboost = CatBoostClassifier()
catboost.load_model("models/catboost_classifier.cbm")

scaler = pickle.load(open("models/scaler.pkl", "rb"))
models = {
    'KNN': pickle.load(open('models/knn.pkl', 'rb')),
    'BaggingClassifier': pickle.load(open('models/bagging_classifier.pkl', 'rb')),
    'GradientBoostingClassifier': pickle.load(open('models/grboosting_classifier.pkl', 'rb')),
    'CatBoostClassifier': catboost,
    'StackingClassifier': pickle.load(open('models/stacking_classifier.pkl', 'rb')),
    'Neural Network': tf.keras.models.load_model('models/tf_keras_mlp.keras')
}

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", type=["csv"])

model_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", list(models.keys()))

if uploaded_file:
    input_df = pd.read_csv(uploaded_file)
    st.write("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    st.dataframe(input_df)

    model = models[model_choice]

    if st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
        if model_choice == "Neural Network":
            features = ['est_diameter_max', 'relative_velocity', 'miss_distance']
            input_scaled = scaler.transform(input_df[features])
            predictions = model.predict(input_scaled)
            predictions = (predictions > 0.5).astype(int).flatten()
        else:
            predictions = model.predict(input_df)
        results_df = pd.DataFrame(predictions, columns=["Predicted"])
        results_df["Predicted"] = results_df["Predicted"].map({
            0: "üü¢ –ê—Å—Ç–µ—Ä–æ–∏–¥ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            1: "üî¥ –ê—Å—Ç–µ—Ä–æ–∏–¥ –æ–ø–∞—Å–µ–Ω"
        })

        st.write("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        st.write(results_df)

st.markdown("---")
st.subheader("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

example_features = ['est_diameter_min', 'est_diameter_max', 'relative_velocity', 'miss_distance', 'absolute_magnitude']
feature_descriptions = {
    'est_diameter_min': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ (–∫–º)',
    'est_diameter_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ (–∫–º)',
    'relative_velocity': '–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ó–µ–º–ª—ë–π (–∫–º/—á)',
    'miss_distance': '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ –¥–æ –ó–µ–º–ª–∏ (–∫–º)',
    'absolute_magnitude': '–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –∑–≤—ë–∑–¥–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞'
}

user_input = {}
with st.form("input_form"):
    for feature in example_features:
        label = feature_descriptions.get(feature)
        user_input[feature] = st.number_input(f"{label}:", value=0)
    submitted = st.form_submit_button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

if submitted:
    input_single = pd.DataFrame([user_input])
    if model_choice == "Neural Network":
        features = ['est_diameter_max', 'relative_velocity', 'miss_distance']
        input_scaled = scaler.transform(input_single[features])
        prediction = model.predict(input_scaled)
        prediction = (prediction > 0.5).astype(int)[0][0]
    else:
        prediction = model.predict(input_single)[0]
    result = {
        0: "üü¢ –ê—Å—Ç–µ—Ä–æ–∏–¥ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        1: "üî¥ –ê—Å—Ç–µ—Ä–æ–∏–¥ –æ–ø–∞—Å–µ–Ω"
    }[prediction]

    if prediction == 1:
        st.error(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**")
    else:
        st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**")
